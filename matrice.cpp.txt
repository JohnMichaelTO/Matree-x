#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "matrice.h"
#include "fonctions.h"
#include "conio.h"

void saisieMatrice(int tailleMatrice, Matrice *matrice)
{
    int i, X, x, y;
    double saisie;

    printf("\n   Saisir la matrice :\n  ");
    X = wherex();
    x = X;
    y = wherey();
    gotoxy(x, y);
    for (i = 0 ; i < tailleMatrice*tailleMatrice; i++)
    {
        scanf("%lf", &saisie);
        matrice->coefficient[i] = saisie;
        if((i + 1) % tailleMatrice != 0)
        {
            x = x + DEF_X;
            gotoxy(x, y);
        }
        else
        {
            x = X;
            y = y + 2;
            gotoxy(x, y);
        }
    }
}

void matTrans(int tailleMatrice, Matrice matrice, Matrice* resultante)
{
    int lig = 0, col = 0;
    double **coeffTampon, **coeffResultant;

    creatMatrice2D(tailleMatrice, &coeffTampon);
    creatMatrice2D(tailleMatrice, &coeffResultant);

    // Copie 1D->2D
    copie1DtoD2(tailleMatrice, matrice, coeffTampon);

    // Transposition
    for(lig = 0 ; lig < tailleMatrice ; lig++)
    {
        for(col = 0 ; col < tailleMatrice ; col++)
        {
            coeffResultant[col][lig] = coeffTampon[lig][col];
        }
    }

    // Copie 2D->1D
    copie2Dto1D(tailleMatrice, coeffResultant, resultante);

    /* Libération de la mémoire */
    freeMatrice2D(tailleMatrice, &coeffTampon);
    freeMatrice2D(tailleMatrice, &coeffResultant);
}

double matTrace(int tailleMatrice, Matrice matrice)
{
    int i = 0, trace = 0;

    for (i = 0 ; i < (tailleMatrice*tailleMatrice) ; i += tailleMatrice+1)
    {
        trace += matrice.coefficient[i];
    }
    return trace;
}

void matInverse(int tailleMatrice, Matrice matrice, Matrice* resultante)
{
    int i, j, k;
    double det, **matriceA, **matriceI, pivot, coef;
    Matrice matriceIdentite;

    if(tailleMatrice == 2)
    {
        det = matDet(tailleMatrice, matrice);
        if(det != 0.0)
        {
            resultante->coefficient[0] = matrice.coefficient[3] / det;
            resultante->coefficient[1] = -matrice.coefficient[1] / det;
            resultante->coefficient[2] = -matrice.coefficient[2] / det;
            resultante->coefficient[3] = matrice.coefficient[0] / det;
        }
    }
    else if(tailleMatrice >= 2)
    {
        creatMatrice2D(tailleMatrice, &matriceA);
        copie1DtoD2(tailleMatrice, matrice, matriceA);

        creatMatrice(tailleMatrice, &matriceIdentite);
        matIdent(tailleMatrice, matriceIdentite, &matriceIdentite);

        creatMatrice2D(tailleMatrice, &matriceI);
        copie1DtoD2(tailleMatrice, matriceIdentite, matriceI);

        if(matDet(tailleMatrice, matrice) != 0.0)
        {
            for(i = 0; i < tailleMatrice; i++)
            {
                do
                {
                    pivot = matriceA[i][i];

                    if(pivot == 0.0)
                    {
                        for(j = 0; j < tailleMatrice; j++)
                        {
                            if(i + 1 < tailleMatrice)
                            {
                                swap(&matriceA[i][j], &matriceA[i + 1][j]);
                                swap(&matriceI[i][j], &matriceI[i + 1][j]);
                            }
                        }
                        #if DEBUG
                        printf("Apres echange\n\n");
                        printf("\nMatrice A\n");
                        afficheMatrice2D(tailleMatrice, matriceA);
                        printf("\nMatrice I\n");
                        afficheMatrice2D(tailleMatrice, matriceI);
                        printf("\n");
                        system("pause");
                        #endif
                    }
                } while(pivot == 0.0);
                #if DEBUG
                printf("---------------\nPivot different de zero trouve : %g\n", pivot);
                #endif

                for(j = 0; j < tailleMatrice; j++)
                {
                    matriceA[i][j] = matriceA[i][j] / pivot;
                    matriceI[i][j] = matriceI[i][j] / pivot;
                }

                for(k = 0; k < tailleMatrice; k++)
                {
                    if(k != i)
                    {
                        coef = matriceA[k][i];

                        for(j = 0; j < tailleMatrice; j++)
                        {
                            matriceA[k][j] = matriceA[k][j] - coef * matriceA[i][j];
                            matriceI[k][j] = matriceI[k][j] - coef * matriceI[i][j];
                        }
                    }
                }

                #if DEBUG
                printf("\nMatrice A\n");
                afficheMatrice2D(tailleMatrice, matriceA);
                printf("\nMatrice I\n");
                afficheMatrice2D(tailleMatrice, matriceI);
                printf("\n");
                system("pause");
                #endif
            }

            copie2Dto1D(tailleMatrice, matriceI, resultante);
            freeMatrice(&matriceIdentite);
            freeMatrice2D(tailleMatrice, &matriceA);
            freeMatrice2D(tailleMatrice, &matriceI);
        }
    }
    else
    {
        // Matrice non inversible
    }
}

void polyCaract(int degree, Matrice matrice, double *Poly)
{
    if(degree == 2)
    {
        Poly[2] = 1.0;
        Poly[1] = -matTrace(degree, matrice);
        Poly[0] = matDet(degree, matrice);
    }
    else if(degree == 3)
    {
        Poly[3] = 1.0;
        Poly[2] = -matTrace(degree, matrice);
        Poly[1] = matrice.coefficient[0] * matrice.coefficient[4] + matrice.coefficient[0] * matrice.coefficient[8] - matrice.coefficient[1] * matrice.coefficient[3] - matrice.coefficient[2] * matrice.coefficient[6] + matrice.coefficient[4] * matrice.coefficient[8] - matrice.coefficient[5] * matrice.coefficient[7];
        Poly[0] = -matDet(degree, matrice);
    }
    else if(degree == 4)
    {
        Poly[4] = 1.0;
        Poly[3] = -matTrace(degree, matrice);
        Poly[2] = -matrice.coefficient[1] * matrice.coefficient[4] + matrice.coefficient[0] * matrice.coefficient[5] - matrice.coefficient[2] * matrice.coefficient[8] - matrice.coefficient[6] * matrice.coefficient[9] + matrice.coefficient[0] * matrice.coefficient[10] + matrice.coefficient[5] * matrice.coefficient[10] - matrice.coefficient[3] * matrice.coefficient[12] - matrice.coefficient[7] * matrice.coefficient[13] - matrice.coefficient[11] * matrice.coefficient[14] + matrice.coefficient[0] * matrice.coefficient[15] + matrice.coefficient[5] * matrice.coefficient[15] + matrice.coefficient[10] * matrice.coefficient[15];
        Poly[1] = matrice.coefficient[2] * matrice.coefficient[5] * matrice.coefficient[8] - matrice.coefficient[1] * matrice.coefficient[6] * matrice.coefficient[8] - matrice.coefficient[2] * matrice.coefficient[4] * matrice.coefficient[9] + matrice.coefficient[0] * matrice.coefficient[6] * matrice.coefficient[9] + matrice.coefficient[1] * matrice.coefficient[4] * matrice.coefficient[10] - matrice.coefficient[0] * matrice.coefficient[5] * matrice.coefficient[10] + matrice.coefficient[3] * matrice.coefficient[5] * matrice.coefficient[12] - matrice.coefficient[1] * matrice.coefficient[7] * matrice.coefficient[12] + matrice.coefficient[3] * matrice.coefficient[10] * matrice.coefficient[12] - matrice.coefficient[2] * matrice.coefficient[11] * matrice.coefficient[12] - matrice.coefficient[3] * matrice.coefficient[4] * matrice.coefficient[13] + matrice.coefficient[0] * matrice.coefficient[7] * matrice.coefficient[13] + matrice.coefficient[7] * matrice.coefficient[10] * matrice.coefficient[13] - matrice.coefficient[6] * matrice.coefficient[11] * matrice.coefficient[13] - matrice.coefficient[3] * matrice.coefficient[8] * matrice.coefficient[14] - matrice.coefficient[7] * matrice.coefficient[9] * matrice.coefficient[14] + matrice.coefficient[0] * matrice.coefficient[11] * matrice.coefficient[14] + matrice.coefficient[5] * matrice.coefficient[11] * matrice.coefficient[14] + matrice.coefficient[1] * matrice.coefficient[4] * matrice.coefficient[15] - matrice.coefficient[0] * matrice.coefficient[5] * matrice.coefficient[15] + matrice.coefficient[2] * matrice.coefficient[8] * matrice.coefficient[15] + matrice.coefficient[6] * matrice.coefficient[9] * matrice.coefficient[15] - matrice.coefficient[0] * matrice.coefficient[10] * matrice.coefficient[15] - matrice.coefficient[5] * matrice.coefficient[10] * matrice.coefficient[15];
        Poly[0] = matDet(degree, matrice);
    }
    else
    {
        // Méthode générale à faire si on a le temps
    }

    affichePoly('x', Poly, degree);
}

void affichePoly(char variable, double *poly, int degree)
{
    int n;
    for(n = degree; n > 0; n--)
    {
        if(poly[n] != 0)
        {
            if(poly[n] == 1.0)
            {
                printf("%c", variable);
            }
            else if(poly[n] == -1.0)
            {
                printf("-%c", variable);
            }
            else
            {
                printf("%g%c", poly[n], variable);
            }

            if(n > 1)
            {
                printf("^%i", n);
            }
        }

        if(poly[n - 1] > 0)
        {
            printf("+");
        }
    }

    if(poly[0] == 1.0)
    {
        printf("1");
    }
    else if(poly[0] == -1.0)
    {
        printf("-1");
    }
    else if(poly[0] != 0.0)
    {
        printf("%g", poly[0]);
    }

    return;
}

void valeurPropre(int degree, double *poly, t_racine *racines)
{
    int i;
    if(degree == 4)
    {
        degre4(racines, poly[4], poly[3], poly[2], poly[1], poly[0], 0);
    }
    else if(degree == 3)
    {
        degre3(racines, poly[3], poly[2], poly[1], poly[0], 0);
    }
    else if(degree == 2)
    {
        degre2(racines, poly[2], poly[1], poly[0], 0.0, 0);
    }

    for(i = 0; i < degree; i++)
    {
        printf("x%i = ", i + 1);
        afficheComplexe(racines[i].re, racines[i].im);
        printf("\n");
    }
}
/*****************************************************************************************************/
void vecteurPropre(int tailleMatrice, Matrice matrice, double inconnue)
{
    int i, j, k;
    double **matriceA, pivot, coef;

    creatMatrice2D(tailleMatrice, &matriceA);
    copie1DtoD2(tailleMatrice, matrice, matriceA);

    for (i = 0; i < tailleMatrice; i++)
    {
        for(j = 0; j < tailleMatrice; j++)
        {
            if(j == i)
            {
                matriceA[i][j] = inconnue - matriceA[i][j];
            }
            else
            {
                matriceA[i][j] = -matriceA[i][j];
            }
        }
    }

    if(matDet(tailleMatrice, matrice) != 0.0)
    {
        for(i = 0; i < (tailleMatrice - 1); i++)
        {
            do
            {
                pivot = matriceA[i][i];

                if(pivot == 0.0)
                {
                    for(j = 0; j < tailleMatrice; j++)
                    {
                        if(i + 1 < tailleMatrice)
                        {
                            swap(&matriceA[i][j], &matriceA[i + 1][j]);
                        }
                    }
                }
            } while(pivot == 0.0);

            for(j = 0; j < tailleMatrice; j++)
            {
                matriceA[i][j] = matriceA[i][j] / pivot;
            }

            for(k = 0; k < tailleMatrice; k++)
            {
                if(k != i)
                {
                    coef = matriceA[k][i];

                    for(j = 0; j < tailleMatrice; j++)
                    {
                        matriceA[k][j] = matriceA[k][j] - coef * matriceA[i][j];
                    }
                }
            }
        }

        printf("V = (");
        for(i = 0; i < (tailleMatrice - 1); i++)
        {
            printf("%g, ", -matriceA[i][(tailleMatrice - 1)]);
        }
        printf("1)\n\n");

        freeMatrice2D(tailleMatrice, &matriceA);
    }
}
/*****************************************************************************************************/

void swap(double *x, double *y)
{
    double temp;
    temp = *x;
    *x = *y;
    *y = temp;
}

void matMutScalaire(int tailleMatrice, Matrice matrice, Matrice* resultante)
{
    int i = 0, scalaire = 0;
    // Saisie
    printf("Saisir le scalaire voulu : ");
    scanf("%d",&scalaire);
    // Multiplication
    for(i = 0 ; i < tailleMatrice*tailleMatrice ; i++)
    {
        resultante->coefficient[i] = scalaire * matrice.coefficient[i];
    }
}

void matAdd(int tailleMatrice, Matrice matrice1, Matrice matrice2, Matrice* resultante)
{
    int i = 0;

    for(i = 0 ; i < tailleMatrice*tailleMatrice ; i++)
    {
        resultante->coefficient[i] = matrice1.coefficient[i] + matrice2.coefficient[i];
    }
}

void matDiff(int tailleMatrice, Matrice matrice1, Matrice matrice2, Matrice* resultante)
{
    int i = 0;

    for(i = 0 ; i < tailleMatrice*tailleMatrice ; i++)
    {
        resultante->coefficient[i] = matrice1.coefficient[i] - matrice2.coefficient[i];
    }
}

void matMut(int tailleMatrice, Matrice matrice1, Matrice matrice2, Matrice* resultante)
{
    int lig = 0, col = 0, lig1 = 0, col1 = 0, lig2 = 0, col2 = 0;
    double **coeffMatrice1, **coeffMatrice2, **coeffResultante;

    creatMatrice2D(tailleMatrice, &coeffMatrice1);
    creatMatrice2D(tailleMatrice, &coeffMatrice2);
    creatMatrice2D(tailleMatrice, &coeffResultante);

    // Copie 1D->2D
    copie1DtoD2(tailleMatrice, matrice1, coeffMatrice1);
    copie1DtoD2(tailleMatrice, matrice2, coeffMatrice2);

    // Multiplication
    for(lig = 0 ; lig < tailleMatrice ; lig++)
    {
        for(col = 0 ; col < tailleMatrice ; col++)
        {
            coeffResultante[lig][col] = 0;
            lig1 = lig;
            col1 = 0;
            col2 = col;
            lig2 = 0;
            do
            {
                coeffResultante[lig][col] += coeffMatrice1[lig1][col1] * coeffMatrice2[lig2][col2];
                col1++;
                lig2++;
            }while(col1 < tailleMatrice);
        }
    }

    // Copie 2D->1D
    copie2Dto1D(tailleMatrice, coeffResultante, resultante);

    /* Libération de la mémoire */
    freeMatrice2D(tailleMatrice, &coeffMatrice1);
    freeMatrice2D(tailleMatrice, &coeffMatrice2);
    freeMatrice2D(tailleMatrice, &coeffResultante);
}

double matDet(int tailleMatrice, Matrice matrice)
{
    int i, j, k = 0;
    double det = 0.0, coef = 0.0;
    Matrice sousMatrice;
    if(tailleMatrice == 2)
    {
        det = (matrice.coefficient[0] * matrice.coefficient[3]) - (matrice.coefficient[1] * matrice.coefficient[2]);
    }
    else
    {
        for(i = 0; i < tailleMatrice; i++)
        {
            sousMatrice.coefficient = (double*)calloc((tailleMatrice - 1)*(tailleMatrice - 1), sizeof(double));
            k = 0;
            for(j = tailleMatrice; j < tailleMatrice * tailleMatrice; j++)
            {
                if(j % tailleMatrice != i)
                {
                    sousMatrice.coefficient[k] = matrice.coefficient[j];
                    #if DEBUG
                    printf("\nCopie : Matrice[%d] => SousMatrice[%d] = %g", j, k, matrice.coefficient[j]);
                    #endif
                    k++;
                }
            }

            coef = matrice.coefficient[i];

            if(i%2 != 0)
            {
                coef = -coef;
            }

            #if DEBUG
            printf("\n\n Sous Matrice %d\n\n", i + 1);
            afficheMatrice(tailleMatrice - 1, sousMatrice);
            printf("\n");
            #endif

            det = det + coef * matDet(tailleMatrice - 1, sousMatrice);
            free(sousMatrice.coefficient);
        }
    }
    return det;
}

void matIdent(int tailleMatrice, Matrice matrice, Matrice* resultante)
{
    int i = 0;

    for (i = 0 ; i < (tailleMatrice*tailleMatrice) ; i += tailleMatrice+1)
    {
        resultante->coefficient[i] = 1.0;
    }
}

void copie1DtoD2(int tailleMatrice, Matrice matrice, double **resultante)
{
    int i = 0, lig = 0, col = 0;
    for(lig = 0 ; lig < tailleMatrice ; lig++)
    {
        for(col = 0 ; col < tailleMatrice ; col++)
        {
            resultante[lig][col] = matrice.coefficient[i];
            i++;
        }
    }
}

void copie2Dto1D(int tailleMatrice, double **matrice, Matrice *resultante)
{
    int i = 0, lig = 0, col = 0;
    for(lig = 0 ; lig < tailleMatrice ; lig++)
    {
        for(col = 0 ; col < tailleMatrice ; col++)
        {
            resultante->coefficient[i] = matrice[lig][col];
            i++;
        }
    }
}

void copie(int tailleMatrice, Matrice matrice1, Matrice matrice2)
{
    int i = 0;
    for(i = 0; i < (tailleMatrice * tailleMatrice); i++)
    {
        matrice2.coefficient[i] = matrice1.coefficient[i];
    }
}

void creatMatrice(int tailleMatrice, Matrice *matrice)
{
    matrice->coefficient = (double*) calloc(tailleMatrice*tailleMatrice, sizeof(double));
}

void freeMatrice(Matrice *matrice)
{
    free(matrice->coefficient);
}

void creatMatrice2D(int tailleMatrice, double ***matrice)
{
    int i;
    (*matrice) = (double**) calloc(tailleMatrice, sizeof(double));
    for (i = 0 ; i < tailleMatrice ; i++)
    {
        (*matrice)[i] = (double*) calloc(tailleMatrice, sizeof(double));
    }
}

void freeMatrice2D(int tailleMatrice, double ***matrice)
{
    int i;
    for (i = 0 ; i < tailleMatrice ; i++)
    {
        free((*matrice)[i]);
    }
    free(*matrice);
}


void afficheMatrice(int tailleMatrice, Matrice matrice)
{
    int i, X, x, y;

    printf("   ");
    X = wherex();
    x = X;
    y = wherey();

    for (i = 0 ; i < tailleMatrice * tailleMatrice; i++)
    {
        gotoxy(x, y);
        printf("%g", matrice.coefficient[i]);
        if((i + 1) % tailleMatrice != 0)
        {
            x = x + DEF_X;
        }
        else
        {
            x = X;
            y = y + 2;
        }
    }
}

void afficheMatrice2D(int tailleMatrice, double **matrice)
{
    int i, j;
    for (i = 0 ; i < tailleMatrice; i++)
    {
        for (j = 0 ; j < tailleMatrice; j++)
        {
            printf("   %g   ", matrice[i][j]);
        }
        printf("\n");
    }
}

void affichageMatrice(int tailleMatrice, int pasUneMatrice, int deuxMatrices, Matrice matrice1, Matrice matrice2, Matrice resultante)
{
    int i;
    double determinant, trace;
    double *Poly;
    t_racine *racine;
    Poly = (double*) calloc(tailleMatrice + 1, sizeof(double));
    racine = (t_racine*) calloc(tailleMatrice, sizeof(t_racine));

    for(i = 0; i < tailleMatrice; i++)
    {
        racine[i].im = 0.0;
    }
    system("cls");

    printf("\n   Matrice :\n");
    afficheMatrice(tailleMatrice, matrice1);
    if(deuxMatrices == 1)
    {
        printf("\n   Matrice secondaire :\n");
        afficheMatrice(tailleMatrice, matrice2);
    }
    if(pasUneMatrice == 0)
    {
        printf("\n\n\n\n\n   Matrice resultante :\n");
        afficheMatrice(tailleMatrice, resultante);
    }
    else if (pasUneMatrice == 1)
    {
        determinant = matDet(tailleMatrice, matrice1);
        trace = matTrace(tailleMatrice, matrice1);
        printf("\n\n Determinant = %g\n", determinant);
        printf("\n\n Trace : %g \n", trace);
        printf("\n\n Polynome caracteristique : ");
        polyCaract(tailleMatrice, matrice1, Poly);
        printf("\n\n Valeurs propres :\n");
        valeurPropre(tailleMatrice, Poly, racine);

        printf("\n\n Vecteurs propres :\n");
        for(i = 0; i < tailleMatrice; i++)
        {
            vecteurPropre(tailleMatrice, matrice1, racine[i].re);
        }
    }
    printf("\n\n\n");
    system("pause");
    free(Poly);
    free(racine);
}
